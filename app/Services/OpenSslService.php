<?php

namespace App\Services;

class OpenSslService
{
    public function generateRootCa(
        string $name,
        string $domain,
        ?string $passphrase = null,
        int $days = 3650 // 10 years
    ): array
    {
        /**
         * In reality, when a user asks for a certificate,
         * they send a CSR (public key and other identity details). However,
         * as the root certificate is created by the authority itself,
         * the private key is generated on the fly, as well as the CSR.
         */
        // Generate private key
        $privateKey = openssl_pkey_new([
            "private_key_bits" => 2048,
            "private_key_type" => OPENSSL_KEYTYPE_RSA,
        ]);

        openssl_pkey_export($privateKey, $privateKeyPem, $passphrase);

        // Generate CSR (Certificate Signing Request)
        $csr = openssl_csr_new([
            'commonName'             => $name,
            'countryName'            => 'BD',
            'stateOrProvinceName'    => 'Dhaka',
            'localityName'           => 'Dhaka',
            'organizationName'       => $domain,
            'organizationalUnitName' => 'IT',
            'emailAddress'           => 'admin@' . $domain,
        ], $privateKey);

        // Generate self-signed certificate
        // It is called self-signed because the private key, csr is generated by the system (own)
        $certificate = openssl_csr_sign($csr, null, $privateKey, $days, [
            'digest_alg' => 'sha256',
        ]);

        openssl_x509_export($certificate, $certificatePem);

        $publicKeyDetails = openssl_pkey_get_details($privateKey);
        $publicKeyPem     = $publicKeyDetails['key'];

        return [
            'private_key' => $privateKeyPem,
            'public_key'  => $publicKeyPem,
            'certificate' => $certificatePem,
        ];
    }

    public function generateCertificate(
        string $name,
        string $domain,
        string $rootCaPrivateKey,
        string $rootCaCertificate,
        ?string $rootCaPassphrase = null,
        ?string $certificatePassphrase = null,
        int $days = 365 // 1 year
    ): array
    {
        $privateKey = openssl_pkey_new([
            "private_key_bits" => 2048,
            "private_key_type" => OPENSSL_KEYTYPE_RSA,
        ]);

        openssl_pkey_export($privateKey, $privateKeyPem, $certificatePassphrase);

        $dn = [
            'commonName'             => $name,
            'countryName'            => 'BD',
            'stateOrProvinceName'    => 'Dhaka',
            'localityName'           => 'Dhaka',
            'organizationName'       => $domain,
            'organizationalUnitName' => 'IT',
            'emailAddress'           => 'admin@' . $domain,
        ];

        $csr = openssl_csr_new($dn, $privateKey);

        $rootCaCertResource       = openssl_x509_read($rootCaCertificate);
        $rootCaPrivateKeyResource = openssl_pkey_get_private($rootCaPrivateKey, $rootCaPassphrase);

        // üìù Build OpenSSL config file with SAN
        $san = filter_var($domain, FILTER_VALIDATE_IP)
            ? "IP:$domain"
            : "DNS:$domain,DNS:www.$domain";

        $opensslConfig = <<<CONF
[ req ]
distinguished_name = req_distinguished_name
req_extensions = v3_req
prompt = no

[ req_distinguished_name ]
CN = $name

[ v3_req ]
subjectAltName = $san
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth, clientAuth
CONF;

        $configPath = tempnam(sys_get_temp_dir(), 'openssl_cnf_');
        file_put_contents($configPath, $opensslConfig);

        $certificate = openssl_csr_sign($csr, $rootCaCertResource, $rootCaPrivateKeyResource, $days, [
            'config' => $configPath,
            'digest_alg' => 'sha256'
        ]);

        unlink($configPath); // Clean up temp file

        openssl_x509_export($certificate, $certificatePem);
        $publicKeyDetails = openssl_pkey_get_details($privateKey);
        $publicKeyPem     = $publicKeyDetails['key'];

        return [
            'private_key' => $privateKeyPem,
            'public_key'  => $publicKeyPem,
            'certificate' => $certificatePem,
        ];
    }


//    public function generateCertificate(
//        string $name,
//        string $domain,
//        string $rootCaPrivateKey,
//        string $rootCaCertificate,
//        ?string $rootCaPassphrase = null,
//        ?string $certificatePassphrase = null,
//        int $days = 365 // 1 year
//    ): array
//    {
//        // Generate a private key for the certificate
//        $privateKey = openssl_pkey_new([
//            "private_key_bits" => 2048,
//            "private_key_type" => OPENSSL_KEYTYPE_RSA,
//        ]);
//
//        openssl_pkey_export($privateKey, $privateKeyPem, $certificatePassphrase);
//
//        // Generate CSR for the certificate
//        $csr = openssl_csr_new([
//            'commonName'             => $name,
//            'countryName'            => 'BD',
//            'stateOrProvinceName'    => 'Dhaka',
//            'localityName'           => 'Dhaka',
//            'organizationName'       => $domain,
//            'organizationalUnitName' => 'IT',
//            'emailAddress'           => 'admin@' . $domain,
//        ], $privateKey);
//
//        // Sign the certificate with the Root CA
//        $rootCaCertResource       = openssl_x509_read($rootCaCertificate);
//        $rootCaPrivateKeyResource = openssl_pkey_get_private($rootCaPrivateKey, $rootCaPassphrase);
//
//        $certificate = openssl_csr_sign($csr, $rootCaCertResource, $rootCaPrivateKeyResource, $days, [
//            'digest_alg'     => 'sha256',
//            'ext_key_usage'  => 'serverAuth,clientAuth',
//            'subjectAltName' => 'DNS:' . $domain . ',DNS:www.' . $domain,
//        ]);
//
//        openssl_x509_export($certificate, $certificatePem);
//
//        $publicKeyDetails = openssl_pkey_get_details($privateKey);
//        $publicKeyPem     = $publicKeyDetails['key'];
//
//        return [
//            'private_key' => $privateKeyPem,
//            'public_key'  => $publicKeyPem,
//            'certificate' => $certificatePem,
//        ];
//    }
}
